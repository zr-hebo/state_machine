package gfsm

import "errors"

// Stater Stater
type Stater interface {
	Walk(val string) (Stater, error)
}

// State State
type State struct {
	name string
}

// Walk Walk
func (s *State) Walk(val string) (err error) {
	return
}

func (s *State) String() (str string) {
	str = s.name
	return
}

// StateMachine StateMachine
type StateMachine struct {
	currentState Stater
	startState   Stater
	endState     Stater
	allStates    []Stater
}

// NewStateMachine NewStateMachine
func NewStateMachine(ss, es Stater, allStates []Stater) (sm *StateMachine) {
	sm = new(StateMachine)
	sm.currentState = ss
	sm.startState = ss
	sm.endState = es
	sm.allStates = allStates
	return
}

// Walk Walk
func (sm *StateMachine) Walk(val string) (err error) {
	if sm.currentState == nil {
		err = errors.New("state machine's state is NULL, cannot walk to")
		return
	}

	if sm.IsFinish() {
		err = errors.New(
			"state machine was already in finish state, cannot walk")
		return
	}

	nextState, err := sm.currentState.Walk(val)
	if err != nil {
		return
	}

	sm.currentState = nextState
	return
}

// IsFinish
func (sm *StateMachine) IsFinish() bool {
	return sm.currentState == sm.endState
}
